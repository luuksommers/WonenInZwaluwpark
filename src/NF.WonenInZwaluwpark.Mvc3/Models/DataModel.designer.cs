#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NF.WonenInZwaluwpark.Mvc3.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SQL2008_736112_zwaluwpark")]
	public partial class DataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArticle(Article instance);
    partial void UpdateArticle(Article instance);
    partial void DeleteArticle(Article instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertArticleComment(ArticleComment instance);
    partial void UpdateArticleComment(ArticleComment instance);
    partial void DeleteArticleComment(ArticleComment instance);
    partial void InsertForumCategory(ForumCategory instance);
    partial void UpdateForumCategory(ForumCategory instance);
    partial void DeleteForumCategory(ForumCategory instance);
    partial void InsertForumPollOption(ForumPollOption instance);
    partial void UpdateForumPollOption(ForumPollOption instance);
    partial void DeleteForumPollOption(ForumPollOption instance);
    partial void InsertForumPollOptionVote(ForumPollOptionVote instance);
    partial void UpdateForumPollOptionVote(ForumPollOptionVote instance);
    partial void DeleteForumPollOptionVote(ForumPollOptionVote instance);
    partial void InsertForumPost(ForumPost instance);
    partial void UpdateForumPost(ForumPost instance);
    partial void DeleteForumPost(ForumPost instance);
    partial void InsertForumSubCategory(ForumSubCategory instance);
    partial void UpdateForumSubCategory(ForumSubCategory instance);
    partial void DeleteForumSubCategory(ForumSubCategory instance);
    partial void InsertLoginLog(LoginLog instance);
    partial void UpdateLoginLog(LoginLog instance);
    partial void DeleteLoginLog(LoginLog instance);
    #endregion
		
		public DataModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["NF.Framework.Base.Properties.Settings.NF_Framework_DatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Article> Articles
		{
			get
			{
				return this.GetTable<Article>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<ArticleComment> ArticleComments
		{
			get
			{
				return this.GetTable<ArticleComment>();
			}
		}
		
		public System.Data.Linq.Table<ForumCategory> ForumCategories
		{
			get
			{
				return this.GetTable<ForumCategory>();
			}
		}
		
		public System.Data.Linq.Table<ForumPollOption> ForumPollOptions
		{
			get
			{
				return this.GetTable<ForumPollOption>();
			}
		}
		
		public System.Data.Linq.Table<ForumPollOptionVote> ForumPollOptionVotes
		{
			get
			{
				return this.GetTable<ForumPollOptionVote>();
			}
		}
		
		public System.Data.Linq.Table<ForumPost> ForumPosts
		{
			get
			{
				return this.GetTable<ForumPost>();
			}
		}
		
		public System.Data.Linq.Table<ForumSubCategory> ForumSubCategories
		{
			get
			{
				return this.GetTable<ForumSubCategory>();
			}
		}
		
		public System.Data.Linq.Table<LoginLog> LoginLogs
		{
			get
			{
				return this.GetTable<LoginLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Article")]
	public partial class Article : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Body;
		
		private System.Nullable<int> _ContentId;
		
		private bool _Published;
		
		private System.Nullable<System.DateTime> _ActiveFrom;
		
		private System.Nullable<System.DateTime> _ActiveUntil;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnContentIdChanging(System.Nullable<int> value);
    partial void OnContentIdChanged();
    partial void OnPublishedChanging(bool value);
    partial void OnPublishedChanged();
    partial void OnActiveFromChanging(System.Nullable<System.DateTime> value);
    partial void OnActiveFromChanged();
    partial void OnActiveUntilChanging(System.Nullable<System.DateTime> value);
    partial void OnActiveUntilChanged();
    #endregion
		
		public Article()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContentId", DbType="Int")]
		public System.Nullable<int> ContentId
		{
			get
			{
				return this._ContentId;
			}
			set
			{
				if ((this._ContentId != value))
				{
					this.OnContentIdChanging(value);
					this.SendPropertyChanging();
					this._ContentId = value;
					this.SendPropertyChanged("ContentId");
					this.OnContentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Published", DbType="Bit NOT NULL")]
		public bool Published
		{
			get
			{
				return this._Published;
			}
			set
			{
				if ((this._Published != value))
				{
					this.OnPublishedChanging(value);
					this.SendPropertyChanging();
					this._Published = value;
					this.SendPropertyChanged("Published");
					this.OnPublishedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFrom", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ActiveFrom
		{
			get
			{
				return this._ActiveFrom;
			}
			set
			{
				if ((this._ActiveFrom != value))
				{
					this.OnActiveFromChanging(value);
					this.SendPropertyChanging();
					this._ActiveFrom = value;
					this.SendPropertyChanged("ActiveFrom");
					this.OnActiveFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveUntil", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ActiveUntil
		{
			get
			{
				return this._ActiveUntil;
			}
			set
			{
				if ((this._ActiveUntil != value))
				{
					this.OnActiveUntilChanging(value);
					this.SendPropertyChanging();
					this._ActiveUntil = value;
					this.SendPropertyChanged("ActiveUntil");
					this.OnActiveUntilChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UniqueName;
		
		private string _FriendlyName;
		
		private int _HouseNbr;
		
		private string _EmailAddress;
		
		private string _HyvesUrl;
		
		private string _FacebookUrl;
		
		private string _LinkedInUrl;
		
		private bool _Share;
		
		private System.Nullable<int> _Gender;
		
		private int _ProfileVersion;
		
		private EntitySet<ForumPollOptionVote> _ForumPollOptionVotes;
		
		private EntitySet<ForumPost> _ForumPosts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUniqueNameChanging(string value);
    partial void OnUniqueNameChanged();
    partial void OnFriendlyNameChanging(string value);
    partial void OnFriendlyNameChanged();
    partial void OnHouseNbrChanging(int value);
    partial void OnHouseNbrChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnHyvesUrlChanging(string value);
    partial void OnHyvesUrlChanged();
    partial void OnFacebookUrlChanging(string value);
    partial void OnFacebookUrlChanged();
    partial void OnLinkedInUrlChanging(string value);
    partial void OnLinkedInUrlChanged();
    partial void OnShareChanging(bool value);
    partial void OnShareChanged();
    partial void OnGenderChanging(System.Nullable<int> value);
    partial void OnGenderChanged();
    partial void OnProfileVersionChanging(int value);
    partial void OnProfileVersionChanged();
    #endregion
		
		public UserProfile()
		{
			this._ForumPollOptionVotes = new EntitySet<ForumPollOptionVote>(new Action<ForumPollOptionVote>(this.attach_ForumPollOptionVotes), new Action<ForumPollOptionVote>(this.detach_ForumPollOptionVotes));
			this._ForumPosts = new EntitySet<ForumPost>(new Action<ForumPost>(this.attach_ForumPosts), new Action<ForumPost>(this.detach_ForumPosts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string UniqueName
		{
			get
			{
				return this._UniqueName;
			}
			set
			{
				if ((this._UniqueName != value))
				{
					this.OnUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._UniqueName = value;
					this.SendPropertyChanged("UniqueName");
					this.OnUniqueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FriendlyName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FriendlyName
		{
			get
			{
				return this._FriendlyName;
			}
			set
			{
				if ((this._FriendlyName != value))
				{
					this.OnFriendlyNameChanging(value);
					this.SendPropertyChanging();
					this._FriendlyName = value;
					this.SendPropertyChanged("FriendlyName");
					this.OnFriendlyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HouseNbr", DbType="Int NOT NULL")]
		public int HouseNbr
		{
			get
			{
				return this._HouseNbr;
			}
			set
			{
				if ((this._HouseNbr != value))
				{
					this.OnHouseNbrChanging(value);
					this.SendPropertyChanging();
					this._HouseNbr = value;
					this.SendPropertyChanged("HouseNbr");
					this.OnHouseNbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(200)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HyvesUrl", DbType="VarChar(200)")]
		public string HyvesUrl
		{
			get
			{
				return this._HyvesUrl;
			}
			set
			{
				if ((this._HyvesUrl != value))
				{
					this.OnHyvesUrlChanging(value);
					this.SendPropertyChanging();
					this._HyvesUrl = value;
					this.SendPropertyChanged("HyvesUrl");
					this.OnHyvesUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookUrl", DbType="VarChar(200)")]
		public string FacebookUrl
		{
			get
			{
				return this._FacebookUrl;
			}
			set
			{
				if ((this._FacebookUrl != value))
				{
					this.OnFacebookUrlChanging(value);
					this.SendPropertyChanging();
					this._FacebookUrl = value;
					this.SendPropertyChanged("FacebookUrl");
					this.OnFacebookUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkedInUrl", DbType="VarChar(200)")]
		public string LinkedInUrl
		{
			get
			{
				return this._LinkedInUrl;
			}
			set
			{
				if ((this._LinkedInUrl != value))
				{
					this.OnLinkedInUrlChanging(value);
					this.SendPropertyChanging();
					this._LinkedInUrl = value;
					this.SendPropertyChanged("LinkedInUrl");
					this.OnLinkedInUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Share", DbType="Bit NOT NULL")]
		public bool Share
		{
			get
			{
				return this._Share;
			}
			set
			{
				if ((this._Share != value))
				{
					this.OnShareChanging(value);
					this.SendPropertyChanging();
					this._Share = value;
					this.SendPropertyChanged("Share");
					this.OnShareChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int NULL")]
		public System.Nullable<int> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileVersion", DbType="Int NOT NULL")]
		public int ProfileVersion
		{
			get
			{
				return this._ProfileVersion;
			}
			set
			{
				if ((this._ProfileVersion != value))
				{
					this.OnProfileVersionChanging(value);
					this.SendPropertyChanging();
					this._ProfileVersion = value;
					this.SendPropertyChanged("ProfileVersion");
					this.OnProfileVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ForumPollOptionVote", Storage="_ForumPollOptionVotes", ThisKey="Id", OtherKey="UserProfileId")]
		public EntitySet<ForumPollOptionVote> ForumPollOptionVotes
		{
			get
			{
				return this._ForumPollOptionVotes;
			}
			set
			{
				this._ForumPollOptionVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ForumPost", Storage="_ForumPosts", ThisKey="Id", OtherKey="UserProfileId")]
		public EntitySet<ForumPost> ForumPosts
		{
			get
			{
				return this._ForumPosts;
			}
			set
			{
				this._ForumPosts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumPollOptionVotes(ForumPollOptionVote entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ForumPollOptionVotes(ForumPollOptionVote entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArticleComment")]
	public partial class ArticleComment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Body;
		
		private System.DateTime _Created;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBodyChanging(string value);
    partial void OnBodyChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    #endregion
		
		public ArticleComment()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Body", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Body
		{
			get
			{
				return this._Body;
			}
			set
			{
				if ((this._Body != value))
				{
					this.OnBodyChanging(value);
					this.SendPropertyChanging();
					this._Body = value;
					this.SendPropertyChanged("Body");
					this.OnBodyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumCategory")]
	public partial class ForumCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private string _Ip;
		
		private EntitySet<ForumSubCategory> _ForumSubCategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    #endregion
		
		public ForumCategory()
		{
			this._ForumSubCategories = new EntitySet<ForumSubCategory>(new Action<ForumSubCategory>(this.attach_ForumSubCategories), new Action<ForumSubCategory>(this.detach_ForumSubCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(20)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumCategory_ForumSubCategory", Storage="_ForumSubCategories", ThisKey="Id", OtherKey="ForumCategoryId")]
		public EntitySet<ForumSubCategory> ForumSubCategories
		{
			get
			{
				return this._ForumSubCategories;
			}
			set
			{
				this._ForumSubCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumSubCategories(ForumSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.ForumCategory = this;
		}
		
		private void detach_ForumSubCategories(ForumSubCategory entity)
		{
			this.SendPropertyChanging();
			entity.ForumCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumPollOption")]
	public partial class ForumPollOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ForumPostId;
		
		private string _Title;
		
		private System.DateTime _DateCreated;
		
		private EntitySet<ForumPollOptionVote> _ForumPollOptionVotes;
		
		private EntityRef<ForumPost> _ForumPost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnForumPostIdChanging(int value);
    partial void OnForumPostIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public ForumPollOption()
		{
			this._ForumPollOptionVotes = new EntitySet<ForumPollOptionVote>(new Action<ForumPollOptionVote>(this.attach_ForumPollOptionVotes), new Action<ForumPollOptionVote>(this.detach_ForumPollOptionVotes));
			this._ForumPost = default(EntityRef<ForumPost>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumPostId", DbType="Int NOT NULL")]
		public int ForumPostId
		{
			get
			{
				return this._ForumPostId;
			}
			set
			{
				if ((this._ForumPostId != value))
				{
					if (this._ForumPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumPostIdChanging(value);
					this.SendPropertyChanging();
					this._ForumPostId = value;
					this.SendPropertyChanged("ForumPostId");
					this.OnForumPostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumPollOption_ForumPollOptionVote", Storage="_ForumPollOptionVotes", ThisKey="Id", OtherKey="ForumPollOptionId")]
		public EntitySet<ForumPollOptionVote> ForumPollOptionVotes
		{
			get
			{
				return this._ForumPollOptionVotes;
			}
			set
			{
				this._ForumPollOptionVotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumPost_ForumPollOption", Storage="_ForumPost", ThisKey="ForumPostId", OtherKey="Id", IsForeignKey=true)]
		public ForumPost ForumPost
		{
			get
			{
				return this._ForumPost.Entity;
			}
			set
			{
				ForumPost previousValue = this._ForumPost.Entity;
				if (((previousValue != value) 
							|| (this._ForumPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumPost.Entity = null;
						previousValue.ForumPollOptions.Remove(this);
					}
					this._ForumPost.Entity = value;
					if ((value != null))
					{
						value.ForumPollOptions.Add(this);
						this._ForumPostId = value.Id;
					}
					else
					{
						this._ForumPostId = default(int);
					}
					this.SendPropertyChanged("ForumPost");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumPollOptionVotes(ForumPollOptionVote entity)
		{
			this.SendPropertyChanging();
			entity.ForumPollOption = this;
		}
		
		private void detach_ForumPollOptionVotes(ForumPollOptionVote entity)
		{
			this.SendPropertyChanging();
			entity.ForumPollOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumPollOptionVote")]
	public partial class ForumPollOptionVote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ForumPollOptionId;
		
		private int _UserProfileId;
		
		private System.DateTime _DateCreated;
		
		private string _Ip;
		
		private EntityRef<ForumPollOption> _ForumPollOption;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnForumPollOptionIdChanging(int value);
    partial void OnForumPollOptionIdChanged();
    partial void OnUserProfileIdChanging(int value);
    partial void OnUserProfileIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    #endregion
		
		public ForumPollOptionVote()
		{
			this._ForumPollOption = default(EntityRef<ForumPollOption>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumPollOptionId", DbType="Int NOT NULL")]
		public int ForumPollOptionId
		{
			get
			{
				return this._ForumPollOptionId;
			}
			set
			{
				if ((this._ForumPollOptionId != value))
				{
					if (this._ForumPollOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumPollOptionIdChanging(value);
					this.SendPropertyChanging();
					this._ForumPollOptionId = value;
					this.SendPropertyChanged("ForumPollOptionId");
					this.OnForumPollOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProfileId", DbType="Int NOT NULL")]
		public int UserProfileId
		{
			get
			{
				return this._UserProfileId;
			}
			set
			{
				if ((this._UserProfileId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfileIdChanging(value);
					this.SendPropertyChanging();
					this._UserProfileId = value;
					this.SendPropertyChanged("UserProfileId");
					this.OnUserProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(20)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumPollOption_ForumPollOptionVote", Storage="_ForumPollOption", ThisKey="ForumPollOptionId", OtherKey="Id", IsForeignKey=true)]
		public ForumPollOption ForumPollOption
		{
			get
			{
				return this._ForumPollOption.Entity;
			}
			set
			{
				ForumPollOption previousValue = this._ForumPollOption.Entity;
				if (((previousValue != value) 
							|| (this._ForumPollOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumPollOption.Entity = null;
						previousValue.ForumPollOptionVotes.Remove(this);
					}
					this._ForumPollOption.Entity = value;
					if ((value != null))
					{
						value.ForumPollOptionVotes.Add(this);
						this._ForumPollOptionId = value.Id;
					}
					else
					{
						this._ForumPollOptionId = default(int);
					}
					this.SendPropertyChanged("ForumPollOption");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ForumPollOptionVote", Storage="_UserProfile", ThisKey="UserProfileId", OtherKey="Id", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ForumPollOptionVotes.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ForumPollOptionVotes.Add(this);
						this._UserProfileId = value.Id;
					}
					else
					{
						this._UserProfileId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumPost")]
	public partial class ForumPost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ForumSubCategoryId;
		
		private int _UserProfileId;
		
		private System.Nullable<int> _ParentForumPostId;
		
		private string _Title;
		
		private string _Content;
		
		private bool _IsPoll;
		
		private System.DateTime _DateCreated;
		
		private string _Ip;
		
		private EntitySet<ForumPollOption> _ForumPollOptions;
		
		private EntitySet<ForumPost> _ForumPosts;
		
		private EntityRef<ForumPost> _ForumPost1;
		
		private EntityRef<UserProfile> _UserProfile;
		
		private EntityRef<ForumSubCategory> _ForumSubCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnForumSubCategoryIdChanging(int value);
    partial void OnForumSubCategoryIdChanged();
    partial void OnUserProfileIdChanging(int value);
    partial void OnUserProfileIdChanged();
    partial void OnParentForumPostIdChanging(System.Nullable<int> value);
    partial void OnParentForumPostIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnIsPollChanging(bool value);
    partial void OnIsPollChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    #endregion
		
		public ForumPost()
		{
			this._ForumPollOptions = new EntitySet<ForumPollOption>(new Action<ForumPollOption>(this.attach_ForumPollOptions), new Action<ForumPollOption>(this.detach_ForumPollOptions));
			this._ForumPosts = new EntitySet<ForumPost>(new Action<ForumPost>(this.attach_ForumPosts), new Action<ForumPost>(this.detach_ForumPosts));
			this._ForumPost1 = default(EntityRef<ForumPost>);
			this._UserProfile = default(EntityRef<UserProfile>);
			this._ForumSubCategory = default(EntityRef<ForumSubCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumSubCategoryId", DbType="Int NOT NULL")]
		public int ForumSubCategoryId
		{
			get
			{
				return this._ForumSubCategoryId;
			}
			set
			{
				if ((this._ForumSubCategoryId != value))
				{
					if (this._ForumSubCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumSubCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ForumSubCategoryId = value;
					this.SendPropertyChanged("ForumSubCategoryId");
					this.OnForumSubCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProfileId", DbType="Int NOT NULL")]
		public int UserProfileId
		{
			get
			{
				return this._UserProfileId;
			}
			set
			{
				if ((this._UserProfileId != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfileIdChanging(value);
					this.SendPropertyChanging();
					this._UserProfileId = value;
					this.SendPropertyChanged("UserProfileId");
					this.OnUserProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentForumPostId", DbType="Int")]
		public System.Nullable<int> ParentForumPostId
		{
			get
			{
				return this._ParentForumPostId;
			}
			set
			{
				if ((this._ParentForumPostId != value))
				{
					if (this._ForumPost1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentForumPostIdChanging(value);
					this.SendPropertyChanging();
					this._ParentForumPostId = value;
					this.SendPropertyChanged("ParentForumPostId");
					this.OnParentForumPostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(90) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPoll", DbType="Bit NOT NULL")]
		public bool IsPoll
		{
			get
			{
				return this._IsPoll;
			}
			set
			{
				if ((this._IsPoll != value))
				{
					this.OnIsPollChanging(value);
					this.SendPropertyChanging();
					this._IsPoll = value;
					this.SendPropertyChanged("IsPoll");
					this.OnIsPollChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(20)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumPost_ForumPollOption", Storage="_ForumPollOptions", ThisKey="Id", OtherKey="ForumPostId")]
		public EntitySet<ForumPollOption> ForumPollOptions
		{
			get
			{
				return this._ForumPollOptions;
			}
			set
			{
				this._ForumPollOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumPost_ForumPost", Storage="_ForumPosts", ThisKey="Id", OtherKey="ParentForumPostId")]
		public EntitySet<ForumPost> ForumPosts
		{
			get
			{
				return this._ForumPosts;
			}
			set
			{
				this._ForumPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumPost_ForumPost", Storage="_ForumPost1", ThisKey="ParentForumPostId", OtherKey="Id", IsForeignKey=true)]
		public ForumPost ForumPost1
		{
			get
			{
				return this._ForumPost1.Entity;
			}
			set
			{
				ForumPost previousValue = this._ForumPost1.Entity;
				if (((previousValue != value) 
							|| (this._ForumPost1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumPost1.Entity = null;
						previousValue.ForumPosts.Remove(this);
					}
					this._ForumPost1.Entity = value;
					if ((value != null))
					{
						value.ForumPosts.Add(this);
						this._ParentForumPostId = value.Id;
					}
					else
					{
						this._ParentForumPostId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ForumPost1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserProfile_ForumPost", Storage="_UserProfile", ThisKey="UserProfileId", OtherKey="Id", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ForumPosts.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ForumPosts.Add(this);
						this._UserProfileId = value.Id;
					}
					else
					{
						this._UserProfileId = default(int);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumSubCategory_ForumPost", Storage="_ForumSubCategory", ThisKey="ForumSubCategoryId", OtherKey="Id", IsForeignKey=true)]
		public ForumSubCategory ForumSubCategory
		{
			get
			{
				return this._ForumSubCategory.Entity;
			}
			set
			{
				ForumSubCategory previousValue = this._ForumSubCategory.Entity;
				if (((previousValue != value) 
							|| (this._ForumSubCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumSubCategory.Entity = null;
						previousValue.ForumPosts.Remove(this);
					}
					this._ForumSubCategory.Entity = value;
					if ((value != null))
					{
						value.ForumPosts.Add(this);
						this._ForumSubCategoryId = value.Id;
					}
					else
					{
						this._ForumSubCategoryId = default(int);
					}
					this.SendPropertyChanged("ForumSubCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumPollOptions(ForumPollOption entity)
		{
			this.SendPropertyChanging();
			entity.ForumPost = this;
		}
		
		private void detach_ForumPollOptions(ForumPollOption entity)
		{
			this.SendPropertyChanging();
			entity.ForumPost = null;
		}
		
		private void attach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.ForumPost1 = this;
		}
		
		private void detach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.ForumPost1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForumSubCategory")]
	public partial class ForumSubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ForumCategoryId;
		
		private string _Title;
		
		private string _Description;
		
		private System.DateTime _DateCreated;
		
		private string _Ip;
		
		private System.Nullable<System.DateTime> _LastPostDate;
		
		private int _PostCount;
		
		private System.Nullable<int> _LastPostByUserProfileId;
		
		private EntitySet<ForumPost> _ForumPosts;
		
		private EntityRef<ForumCategory> _ForumCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnForumCategoryIdChanging(int value);
    partial void OnForumCategoryIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnIpChanging(string value);
    partial void OnIpChanged();
    partial void OnLastPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastPostDateChanged();
    partial void OnPostCountChanging(int value);
    partial void OnPostCountChanged();
    partial void OnLastPostByUserProfileIdChanging(System.Nullable<int> value);
    partial void OnLastPostByUserProfileIdChanged();
    #endregion
		
		public ForumSubCategory()
		{
			this._ForumPosts = new EntitySet<ForumPost>(new Action<ForumPost>(this.attach_ForumPosts), new Action<ForumPost>(this.detach_ForumPosts));
			this._ForumCategory = default(EntityRef<ForumCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumCategoryId", DbType="Int NOT NULL")]
		public int ForumCategoryId
		{
			get
			{
				return this._ForumCategoryId;
			}
			set
			{
				if ((this._ForumCategoryId != value))
				{
					if (this._ForumCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ForumCategoryId = value;
					this.SendPropertyChanged("ForumCategoryId");
					this.OnForumCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ip", DbType="VarChar(20)")]
		public string Ip
		{
			get
			{
				return this._Ip;
			}
			set
			{
				if ((this._Ip != value))
				{
					this.OnIpChanging(value);
					this.SendPropertyChanging();
					this._Ip = value;
					this.SendPropertyChanged("Ip");
					this.OnIpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastPostDate
		{
			get
			{
				return this._LastPostDate;
			}
			set
			{
				if ((this._LastPostDate != value))
				{
					this.OnLastPostDateChanging(value);
					this.SendPropertyChanging();
					this._LastPostDate = value;
					this.SendPropertyChanged("LastPostDate");
					this.OnLastPostDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostCount", DbType="Int NOT NULL")]
		public int PostCount
		{
			get
			{
				return this._PostCount;
			}
			set
			{
				if ((this._PostCount != value))
				{
					this.OnPostCountChanging(value);
					this.SendPropertyChanging();
					this._PostCount = value;
					this.SendPropertyChanged("PostCount");
					this.OnPostCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPostByUserProfileId", DbType="Int")]
		public System.Nullable<int> LastPostByUserProfileId
		{
			get
			{
				return this._LastPostByUserProfileId;
			}
			set
			{
				if ((this._LastPostByUserProfileId != value))
				{
					this.OnLastPostByUserProfileIdChanging(value);
					this.SendPropertyChanging();
					this._LastPostByUserProfileId = value;
					this.SendPropertyChanged("LastPostByUserProfileId");
					this.OnLastPostByUserProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumSubCategory_ForumPost", Storage="_ForumPosts", ThisKey="Id", OtherKey="ForumSubCategoryId")]
		public EntitySet<ForumPost> ForumPosts
		{
			get
			{
				return this._ForumPosts;
			}
			set
			{
				this._ForumPosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ForumCategory_ForumSubCategory", Storage="_ForumCategory", ThisKey="ForumCategoryId", OtherKey="Id", IsForeignKey=true)]
		public ForumCategory ForumCategory
		{
			get
			{
				return this._ForumCategory.Entity;
			}
			set
			{
				ForumCategory previousValue = this._ForumCategory.Entity;
				if (((previousValue != value) 
							|| (this._ForumCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumCategory.Entity = null;
						previousValue.ForumSubCategories.Remove(this);
					}
					this._ForumCategory.Entity = value;
					if ((value != null))
					{
						value.ForumSubCategories.Add(this);
						this._ForumCategoryId = value.Id;
					}
					else
					{
						this._ForumCategoryId = default(int);
					}
					this.SendPropertyChanged("ForumCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.ForumSubCategory = this;
		}
		
		private void detach_ForumPosts(ForumPost entity)
		{
			this.SendPropertyChanging();
			entity.ForumSubCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginLog")]
	public partial class LoginLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserProfileId;
		
		private System.DateTime _LoginDate;
		
		private string _UserIp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserProfileIdChanging(string value);
    partial void OnUserProfileIdChanged();
    partial void OnLoginDateChanging(System.DateTime value);
    partial void OnLoginDateChanged();
    partial void OnUserIpChanging(string value);
    partial void OnUserIpChanged();
    #endregion
		
		public LoginLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserProfileId", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string UserProfileId
		{
			get
			{
				return this._UserProfileId;
			}
			set
			{
				if ((this._UserProfileId != value))
				{
					this.OnUserProfileIdChanging(value);
					this.SendPropertyChanging();
					this._UserProfileId = value;
					this.SendPropertyChanged("UserProfileId");
					this.OnUserProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LoginDate
		{
			get
			{
				return this._LoginDate;
			}
			set
			{
				if ((this._LoginDate != value))
				{
					this.OnLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LoginDate = value;
					this.SendPropertyChanged("LoginDate");
					this.OnLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserIp", DbType="VarChar(40)")]
		public string UserIp
		{
			get
			{
				return this._UserIp;
			}
			set
			{
				if ((this._UserIp != value))
				{
					this.OnUserIpChanging(value);
					this.SendPropertyChanging();
					this._UserIp = value;
					this.SendPropertyChanged("UserIp");
					this.OnUserIpChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
